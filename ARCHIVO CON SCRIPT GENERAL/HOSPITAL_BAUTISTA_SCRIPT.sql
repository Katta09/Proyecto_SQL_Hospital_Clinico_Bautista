DROP SCHEMA IF EXISTS HOSPITAL_BAUTISTA;
CREATE SCHEMA HOSPITAL_BAUTISTA;
USE HOSPITAL_BAUTISTA;

DROP TABLE IF EXISTS `PACIENTE`;
CREATE TABLE IF NOT EXISTS `PACIENTE`(
`ID_PACIENTE` INT NOT NULL PRIMARY KEY,
`NOMBRE_PACIENTE` VARCHAR(50),
`APELLIDO_PACIENTE` VARCHAR(50),
`CEDULA_PACIENTE` CHAR(15),
`FECHA_NACIMIENTO` DATE,
`TELEFONO_PACIENTE` VARCHAR(20),
`DIRECCION_PACIENTE` VARCHAR(100),
`EMAIL_PACIENTE` VARCHAR(100))
COMMENT='TABLA CON INFORMACION DEL PACIENTE'; 

DROP TABLE IF EXISTS `MEDICO`;
CREATE TABLE `MEDICO`(
`ID_MEDICO` INT NOT NULL PRIMARY KEY,
`NOMBRE_MEDICO` VARCHAR(15),
`APELLIDO_MEDICO` VARCHAR(15),
`EMAIL_MEDICO` VARCHAR(100)) 
COMMENT='TABLA CON INFORMACION DEL MEDICO'; 

DROP TABLE IF EXISTS `CONSULTORIO`; 
CREATE TABLE `CONSULTORIO`(
`ID_CONSULTORIO` INT NOT NULL PRIMARY KEY,
`NUMERO_CONSULTORIO` VARCHAR(15),
`UBICACION` VARCHAR(30))
COMMENT='TABLA DE LOS CONSULTORIOS QUE TIENE EL HOSPITAL'; 

DROP TABLE IF EXISTS `FARMACIA`;
CREATE TABLE `FARMACIA`(
`ID_MEDICAMENTO` INT NOT NULL PRIMARY KEY,
`NOMBRE_MEDICAMENTO` VARCHAR(30),
`LOTE` VARCHAR(30),
`FECHA_CADUCIDAD` DATE,
`STOCK_MEDICAMENTO` INT,
`NOTAS` VARCHAR(100))
COMMENT='TABLA CON INFORMACION DE LOS MEDICAMENTOS QUE TIENE EL HOSPITAL';

DROP TABLE IF EXISTS `ESPECIALIDAD_MEDICO`;
CREATE TABLE `ESPECIALIDAD_MEDICO`(
`ID_ESPECIALIDAD` INT NOT NULL PRIMARY KEY,
`NOMBRE_ESPECIALIDAD` VARCHAR(100),
`ID_MEDICO` INT,
CONSTRAINT `FK_ESPECIALIDAD_MEDICO_MEDICO` FOREIGN KEY (ID_MEDICO) REFERENCES `MEDICO` (ID_MEDICO))
COMMENT='TABLA CON INFORMACION DE LA ESPECIALIDAD DE LOS MEDICOS DEL HOSPITAL';

DROP TABLE IF EXISTS `CONSULTORIO_MEDICO`;
CREATE TABLE `CONSULTORIO_MEDICO`(
`CONSULTORIO_MEDICO_ID` INT NOT NULL PRIMARY KEY,
`ID_CONSULTORIO` INT,
`ID_MEDICO` INT,
CONSTRAINT `FK_CONSULTORIO_MEDICO_MEDICO` FOREIGN KEY (ID_MEDICO) REFERENCES `MEDICO` (ID_MEDICO),
CONSTRAINT `FK_CONSULTORIO_MEDICO_CONSULTORIO` FOREIGN KEY (ID_CONSULTORIO) REFERENCES `CONSULTORIO` (ID_CONSULTORIO))
COMMENT='TABLA CON INFORMACION QUE RELACIONA AL MEDICO CON EL CONSULTORIO EN DONDE ATIENDE';


DROP TABLE IF EXISTS `CITA_PACIENTE_MEDICO`;
CREATE TABLE `CITA_PACIENTE_MEDICO`(
`ID_CITA` INT NOT NULL PRIMARY KEY,
`FECHA_CITA` DATETIME,
`ESTADO_CITA` VARCHAR(50),
`ID_PACIENTE` INT,
`ID_MEDICO` INT,
CONSTRAINT `FK_CITA_PACIENTE` FOREIGN KEY (ID_PACIENTE) REFERENCES `PACIENTE` (ID_PACIENTE),
CONSTRAINT `FK_CITA_MEDICO` FOREIGN KEY (ID_MEDICO) REFERENCES `MEDICO` (ID_MEDICO))
COMMENT='TABLA DE CITAS MEDICA';

DROP TABLE IF EXISTS `HISTORIA_PACIENTE`;
CREATE TABLE `HISTORIA_PACIENTE`(
`ID_HISTORIA` INT NOT NULL PRIMARY KEY,
`HORA_ENTRADA` TIME,
`HORA_SALIDA` TIME,
`DIAGNOSTICO` VARCHAR(500),
`OBSERVACIONES` VARCHAR(1000),
`ID_PACIENTE` INT,
`ID_MEDICO` INT,
CONSTRAINT `FK_HISTORIA_PACIENTE_PACIENTE` FOREIGN KEY (ID_PACIENTE) REFERENCES `PACIENTE` (ID_PACIENTE),
CONSTRAINT `FK_HISTORIA_PACIENTE_MEDICO` FOREIGN KEY (ID_MEDICO) REFERENCES `MEDICO` (ID_MEDICO))
COMMENT='TABLA DE HISTORIA MEDICA';

DROP TABLE IF EXISTS `PRESCRIPCIONES`;
CREATE TABLE `PRESCRIPCIONES`(
`ID_PRESCRIPCION` INT NOT NULL PRIMARY KEY,
`ID_MEDICAMENTO` INT,
`ID_PACIENTE` INT,
`ID_MEDICO` INT,
`ID_HISTORIA` INT,
CONSTRAINT `FK_PRESCRIPCION_FARMACIA` FOREIGN KEY (ID_MEDICAMENTO) REFERENCES `FARMACIA` (ID_MEDICAMENTO),
CONSTRAINT `FK_PRESCRIPCION_PACIENTE` FOREIGN KEY (ID_PACIENTE) REFERENCES `PACIENTE` (ID_PACIENTE),
CONSTRAINT `FK_PRESCRIPCION_MEDICO` FOREIGN KEY (ID_MEDICO) REFERENCES `MEDICO` (ID_MEDICO))
COMMENT='TABLA QUE RELACIONA LAS TABLAS FARMACIA, PACIENTE, MEDICO';

DROP TABLE IF EXISTS `FACTURA`;
CREATE TABLE `FACTURA`(
`ID_FACTURA` INT NOT NULL PRIMARY KEY,
`NUMERO_FACTURA` VARCHAR(30),
`FECHA_FACTURA` DATE,
`MONTO_PAGADO_CLP` VARCHAR(100),
`METODO_PAGO` VARCHAR(30),
`ID_PACIENTE` INT NOT NULL,
`ID_ESPECIALIDAD` INT,
CONSTRAINT `FK_FACTURA_PACIENTE` FOREIGN KEY (ID_PACIENTE) REFERENCES `PACIENTE` (ID_PACIENTE),
CONSTRAINT `FK_FACTURA_ESPECIALIDAD` FOREIGN KEY (ID_ESPECIALIDAD) REFERENCES `ESPECIALIDAD_MEDICO` (ID_ESPECIALIDAD))
COMMENT= "TABLA DE FACTURA QUE CONTIENE LOS DATOS DE PAGO DE LA CONSULTA";

INSERT INTO `PACIENTE`(ID_PACIENTE, NOMBRE_PACIENTE, APELLIDO_PACIENTE, CEDULA_PACIENTE, FECHA_NACIMIENTO, TELEFONO_PACIENTE, DIRECCION_PACIENTE, EMAIL_PACIENTE)
VALUES (1, 'JUAN', 'PEREZ', '12345678-9', '1965-08-15', '912345678', 'SANTIAGO, REGION METROPOLITANA', 'JUAN.PEREZ@GMAIL.COM'),
(2, 'MARIA', 'GOMEZ', '23456789-K', '1973-04-07', '923456789', 'VALPARAISO, REGION DE VALPARAISO', 'MARIA.GOMEZ@GMAIL.COM'),
(3, 'LUIS', 'RODRIGUEZ', '34567890-1', '1980-11-23', '934567890', 'CONCEPCION, REGION DEL BIOBIO', 'LUIS.RODRIGUEZ@GMAIL.COM'),
(4, 'ANA', 'MARTINEZ', '45678901-2', '1987-05-12', '945678901', 'LA SERENA, REGION DE COQUIMBO', 'ANA.MARTINEZ@GMAIL.COM'),
(5, 'CARLOS', 'LOPEZ', '56789012-3', '1994-02-02', '956789012', 'ANTOFAGASTA, REGION DE ANTOFAGASTA', 'CARLOS.LOPEZ@GMAIL.COM'),
(6, 'LAURA', 'SANCHEZ', '67890123-4', '2000-07-18', '967890123', 'ARICA, REGION DE ARICA Y PARINACOTA', 'LAURA.SANCHEZ@GMAIL.COM'),
(7, 'PEDRO', 'FERNANDEZ', '78901234-5', '2007-03-09', '978901234', 'PUERTO MONTT, REGION DE LOS LAGOS', 'PEDRO.FERNANDEZ@GMAIL.COM'),
(8, 'ISABEL', 'GARCIA', '89012345-6', '2014-10-25', '989012345', 'RANCAGUA, REGION DE O\'HIGGINS', 'ISABEL.GARCIA@GMAIL.COM'),
(9, 'ROBERTO', 'HERNANDEZ', '90123456-7', '1961-12-06', '990123456', 'TALCA, REGION DEL MAULE', 'ROBERTO.HERNANDEZ@GMAIL.COM'),
(10, 'SOFIA', 'DIAZ', '15347876-8', '1969-09-29', '911223344', 'IQUIQUE, REGION DE TARAPACA', 'SOFIA.DIAZ@GMAIL.COM'),
(11, 'MIGUEL', 'TORRES', '12345678-K', '1976-06-14', '922334455', 'CURICO, REGION DEL MAULE', 'MIGUEL.TORRES@GMAIL.COM'),
(12, 'CARMEN', 'ORTEGA', '23456789-1', '1983-01-03', '933445566', 'PUNTA ARENAS, REGION DE MAGALLANES', 'CARMEN.ORTEGA@GMAIL.COM'),
(13, 'ALEJANDRO', 'LARA', '34567890-2', '1990-04-22', '944556677', 'COPIAPO, REGION DE ATACAMA', 'ALEJANDRO.LARA@GMAIL.COM'),
(14, 'PAULA', 'PINEDA', '45678901-3', '1997-11-11', '955667788', 'IQUIQUE, REGION DE TARAPACA', 'PAULA.PINEDA@GMAIL.COM'),
(15, 'JAVIER', 'CASTRO', '56789012-4', '2003-08-30', '966778899', 'VIÃ‘A DEL MAR, REGION DE VALPARAISO', 'JAVIER.CASTRO@GMAIL.COM');


/*EN ESTA PARTE SE INICIA LA INSERCION DE TODOS LOS DATOS EN LAS TABLAS A TRAVES DE LA IMPORTACION DE ARCHIVOS .CSV
PARA ELLO SE DEBE PROCEDER DE LA SIGUIENTE MANERA: 
1) CONSULTAR TABLA CON SELECT * FROM NOMBRE_DE_LA_TABLA (EJEMPLO SELECT * FROM MEDICO)
2) SELECCIONAR EL ITEM IMPORT QUE SE ENCUENTRA EN LA REJILLA DE RESULTADOS
3) SELECCIONAR BROWSE Y BUSCAR EL ARCHIVO EXTENSION .CSV QUE SE DESEA CARGAR (SE DEBE CARGAR EN ORDEN DE CREACION DE LAS TABLAS, DE TABLA MADRE 
   A TABLA HIJA)
4) LUEGO DE DAR "SIGUIENTE (NEXT)" DEBO SELECCIONAR LA PRIMERA OPCION "USAR TABLA EXISTENTE" Y EN EL MENU DESPLEGABLE ELEGIR LA TABLA CARGADA
5) VERIFICAR QUE EL ARCHIVO SEA UTF-8 Y QUE LOS CAMPOS CARGADOS SEAN LOS CORRECTOS
6) DAR SIGUIENTE Y FINALIZAR EL PROCESO
7) COMO ULTIMO PASO SE COMPRUEBA LA CORRECTA INSERCION DE DATOS CONSULTANDO LA TABLA CON SELECT * FROM
*/
----- SE DEJAN LAS CONSULTAS A CONTINUACION PARA COMPROBAR EL PROCESO DE INSERCION

----- ESTA INSERCION FUE EJECUTADA CON INSERT INTO
SELECT * FROM PACIENTE;

----- ESTAS INSERCIONES FUERON EJECUTADAS POR IMPORTACION
SELECT * FROM MEDICO;
SELECT * FROM CONSULTORIO;
SELECT * FROM FARMACIA;
SELECT * FROM ESPECIALIDAD_MEDICO;
SELECT * FROM CONSULTORIO_MEDICO;
SELECT * FROM CITA_PACIENTE_MEDICO;
SELECT * FROM HISTORIA_PACIENTE;
SELECT * FROM PRESCRIPCIONES;
SELECT * FROM FACTURA;

/* CREACION DE 5 VISTAS. DESPUES DE LA CREACION DE CADA VISTA, APARECE LA CONSULTA DE LA MISMA
ORDEN DE CREACION DE LAS VISTAS:
1) VISTA_PACIENTE_HOSPITAL
2) VISTA_HORA_ATENCION_PACIENTE_MEDICO
3) VISTA_MONTO_PAGADO_DEL_PACIENTE
4) VISTA_SOLICITUD_PRODUCTOS_BAJOS_EN_STOCK
5) VISTA_INFORMACION_DE_FACTURAS 
*/

CREATE OR REPLACE VIEW VISTA_PACIENTE_HOSPITAL AS
SELECT NOMBRE_PACIENTE AS NOMBRE, APELLIDO_PACIENTE AS APELLIDO,
TELEFONO_PACIENTE AS TELEFONO, EMAIL_PACIENTE AS EMAIL FROM PACIENTE;

SELECT * FROM VISTA_PACIENTE_HOSPITAL;

CREATE OR REPLACE VIEW VISTA_HORA_ATENCION_PACIENTE_MEDICO AS
SELECT P.NOMBRE_PACIENTE, P.APELLIDO_PACIENTE, C.FECHA_CITA, M.NOMBRE_MEDICO, M.APELLIDO_MEDICO, E.NOMBRE_ESPECIALIDAD
FROM PACIENTE AS P
INNER JOIN CITA_PACIENTE_MEDICO AS C
       ON P.ID_PACIENTE=C.ID_PACIENTE
INNER JOIN MEDICO AS M 
	  ON M.ID_MEDICO=C.ID_MEDICO
INNER JOIN ESPECIALIDAD_MEDICO AS E 
      ON M.ID_MEDICO=E.ID_MEDICO;
      
SELECT * FROM VISTA_HORA_ATENCION_PACIENTE_MEDICO;

CREATE OR REPLACE VIEW VISTA_MONTO_PAGADO_DEL_PACIENTE AS
SELECT P.NOMBRE_PACIENTE, P.APELLIDO_PACIENTE, F.MONTO_PAGADO_CLP, F.METODO_PAGO
FROM PACIENTE AS P
INNER JOIN FACTURA AS F
      ON P.ID_PACIENTE=F.ID_PACIENTE;

SELECT * FROM VISTA_MONTO_PAGADO_DEL_PACIENTE;

CREATE OR REPLACE VIEW VISTA_SOLICITUD_PRODUCTOS_BAJOS_EN_STOCK AS
SELECT NOMBRE_MEDICAMENTO AS PRODUCTOS_BAJOS_EN_STOCK
FROM FARMACIA
WHERE STOCK_MEDICAMENTO <20;

SELECT * FROM VISTA_SOLICITUD_PRODUCTOS_BAJOS_EN_STOCK;

CREATE OR REPLACE VIEW VISTA_INFORMACION_DE_FACTURAS AS
SELECT COUNT(ID_FACTURA) AS CANTIDAD_FACTURAS, 
SUM(MONTO_PAGADO_CLP) AS MONTO_TOTAL_FACTURADO,
METODO_PAGO
FROM FACTURA
GROUP BY METODO_PAGO ORDER BY CANTIDAD_FACTURAS ASC;

SELECT * FROM VISTA_INFORMACION_DE_FACTURAS;


----- CREACION DE FUNCIONES ALMACENADAS------

----- LA PRIMERA FUNCION NOS PERMITE CONOCER LA EDAD DEL PACIENTE A TRAVES DE SU FECHA DE NACIMIENTO

DROP FUNCTION IF EXISTS FN_CALCULAR_EDAD; 
DELIMITER //
CREATE FUNCTION FN_CALCULAR_EDAD (FECHA_NACIMIENTO DATE)
RETURNS INT 
DETERMINISTIC
BEGIN
DECLARE EDAD INT;
SET EDAD= YEAR(CURDATE()) - YEAR(FECHA_NACIMIENTO) - (RIGHT(CURDATE(), 5) < RIGHT(FECHA_NACIMIENTO, 5));
RETURN EDAD;
END//
DELIMITER ; 

SELECT FN_CALCULAR_EDAD ('1965-08-15') AS EDAD;

----- SEGUNDA FUNCION

DROP FUNCTION IF EXISTS FN_CANTIDAD_FACTURAS_POR_METODO_DE_PAGO; 
DELIMITER //
CREATE FUNCTION FN_CANTIDAD_FACTURAS_POR_METODO_DE_PAGO (P_METODO_PAGO VARCHAR(30))
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE TOTAL_FACTURAS INT;
    SET TOTAL_FACTURAS = (
        SELECT COUNT(ID_FACTURA) FROM FACTURA
        WHERE METODO_PAGO LIKE CONCAT('%', P_METODO_PAGO, '%')
    );
    RETURN TOTAL_FACTURAS; 
END//
DELIMITER ;
 
SELECT FN_CANTIDAD_FACTURAS_POR_METODO_DE_PAGO ('DEBITO') AS TOTAL_FACTURAS;

----- LA SEGUNDA FUNCION NOS PERMITE CONOCER LA CANTIDAD DE FACTURAS GENERADAS POR CADA METODO DE PAGO (CREDITO, DEBITO O EFECTIVO)

----- CREACION DE STORE PROCEDURE-----

/* A CONTINUACION SEGUIDO DE ESTE COMENTARIO PROCEDI A CREAR UN STORE PROCEDURE `SP_INSERTAR_DATOS_PACIENTES` QUE ME PERMITE INSERTAR DATOS 
A LA TABLA PACIENTE. 
PARA ELLO DEFINI LOS PARAMETROS NECESARIOS, PARA EL INGRESO EN CADA CAMPO DE LA TABLA JUNTO CON SU TIPO DE DATO.
LUEGO DE LA CREACION DEL SP PROCEDI A INVOCAR EL MISMO CON EL COMANDO CALL Y A REALIZAR UNA PRUEBA DE INSERCION */

DROP procedure IF EXISTS `SP_INSERTAR_DATOS_PACIENTES`;
DELIMITER $$
CREATE PROCEDURE `SP_INSERTAR_DATOS_PACIENTES` (IN P_ID_PACIENTE INT,
                                                IN P_NOMBRE_PACIENTE VARCHAR(50),
                                                IN P_APELLIDO_PACIENTE VARCHAR(50),
                                                IN P_CEDULA_PACIENTE VARCHAR(50),
												IN P_FECHA_NACIMIENTO DATE,
                                                IN P_TELEFONO_PACIENTE VARCHAR(20),
                                                IN P_DIRECCION_PACIENTE VARCHAR(100),
												IN P_EMAIL_PACIENTE VARCHAR(100))
                                                                                                
BEGIN
INSERT INTO HOSPITAL_BAUTISTA.PACIENTE
VALUES (P_ID_PACIENTE, P_NOMBRE_PACIENTE, P_APELLIDO_PACIENTE, P_CEDULA_PACIENTE, P_FECHA_NACIMIENTO,
        P_TELEFONO_PACIENTE, P_DIRECCION_PACIENTE, P_EMAIL_PACIENTE);
END$$

DELIMITER ;

CALL `SP_INSERTAR_DATOS_PACIENTES` (17, 'ANITA', 'RAMIREZ', '27209173-0', '1960-07-25', '947775208', 'SANTIAGO, REGION METROPOLITANA', 'ANITA.RAMIREZD@GMAIL.COM');
----- INGRESÉ LOS DATOS DE ANITA Y LUEGO REALICÉ UNA CONSULTA PARA VERIFICAR QUE HABÍA REALIZADO CORRECTAMENTE EL INGRESO----

SELECT * FROM `PACIENTE`;

----- EL SEGUNDO PROCEDIMIENTO ME PERMITE ORDENAR LOS CAMPOS DE LA TABLA PACIENTE DE FORMA ASCENDENTE O DESCENDENTE----

DROP procedure IF EXISTS `SP_ORDENAR_PACIENTES`;
DELIMITER $$
CREATE PROCEDURE  `SP_ORDENAR_PACIENTES` (IN P_NOMBRE_COLUMNA VARCHAR(50), IN P_ORDEN VARCHAR(50))
BEGIN
SET @sqlQuery = CONCAT('SELECT * FROM PACIENTE ORDER BY ', P_NOMBRE_COLUMNA,' ', P_ORDEN);
    PREPARE stmt FROM @sqlQuery;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END$$

DELIMITER ;

CALL SP_ORDENAR_PACIENTES ('APELLIDO_PACIENTE', 'ASC');
CALL SP_ORDENAR_PACIENTES ('APELLIDO_PACIENTE', 'DESC');

----- CREACION DE TRIGGER-----

/* EL TRIGGER CREADO EN LA TABLA PACIENTE PERMITE CONOCER LA FECHA, HORA Y USUARIO QUE INGRESA REGISTROS EN ESTA TABLA,
DICHA INFORMACION SERA REFLEJADA EN UNA NUEVA TABLA CREADA LLAMADA PACIENTE_REGISTRO */

DROP TABLE IF EXISTS PACIENTE_REGISTRO;
CREATE TABLE PACIENTE_REGISTRO (ID_PACIENTE_R INT, NOMBRE_PACIENTE VARCHAR(50), APELLIDO_PACIENTE VARCHAR(50), FECHA_NACIMIENTO DATE, 
TELEFONO_PACIENTE VARCHAR(50), DIRECCION_PACIENTE VARCHAR(50), EMAIL_PACIENTE VARCHAR(50), USUARIO VARCHAR(50), FECHA_REGISTRO DATETIME);

DROP TRIGGER IF EXISTS PACIENTE_REGISTRO_AI;
CREATE TRIGGER PACIENTE_REGISTRO_AI AFTER INSERT ON PACIENTE FOR EACH ROW INSERT INTO PACIENTE_REGISTRO (ID_PACIENTE_R, NOMBRE_PACIENTE, 
APELLIDO_PACIENTE, FECHA_NACIMIENTO, TELEFONO_PACIENTE, DIRECCION_PACIENTE, EMAIL_PACIENTE, USUARIO, FECHA_REGISTRO) 
VALUES (NEW.ID_PACIENTE, NEW.NOMBRE_PACIENTE, NEW.APELLIDO_PACIENTE, NEW.FECHA_NACIMIENTO, NEW.TELEFONO_PACIENTE, 
NEW.DIRECCION_PACIENTE, NEW.EMAIL_PACIENTE, CURRENT_USER, NOW());

CALL `SP_INSERTAR_DATOS_PACIENTES` (19, 'PAOLA', 'ALVARADO', '28207175-0', '1989-07-24', '937775201', 'SANTIAGO, REGION METROPOLITANA', 'PAOLA.ALVARADO@GMAIL.COM');

SELECT * FROM PACIENTE_REGISTRO;

-------------------------- DESAFIO IMPLEMENTACION DE SENTENCIAS (SUBLENGUAJE DCL)-----------------------------------------------------

/* CREACION DE 2 USUARIOS, EL USUARIO 'ANITA' TENDRÁ PERMISOS DE SOLO LECTURA EN TODAS LAS TABLAS, DE LA BASE DE DATOS HOSPITAL_BAUTISTA
MIENTRAS QUE EL USUARIO 'NATU' TENDRÁ PERMISOS DE LECTURA, INSERCION Y MODIFICACIÓN DE DATOS*/

USE MYSQL;
DROP USER IF EXISTS 'ANITA'@'LOCALHOST';
DROP USER IF EXISTS 'NATU'@'LOCALHOST';
CREATE USER 'ANITA'@'LOCALHOST' IDENTIFIED BY '6593164';
CREATE USER 'NATU'@'LOCALHOST' IDENTIFIED BY 'CODERHOUSE';

SELECT * FROM USER;

GRANT SELECT ON HOSPITAL_BAUTISTA.* TO 'ANITA'@'LOCALHOST';
SHOW GRANTS FOR 'ANITA'@'LOCALHOST';

GRANT SELECT, INSERT, UPDATE ON HOSPITAL_BAUTISTA.* TO 'NATU'@'LOCALHOST';
SHOW GRANTS FOR 'NATU'@'LOCALHOST';

-------- DESAFIO TRANSACCIONES-------

----- ESTA PRIMERA TRANSACCIÓN PERMITE ELIMINAR TRES (3) REGISTROS DE LA TABLA FARMACIA-----
USE HOSPITAL_BAUTISTA;

START TRANSACTION;
DELETE FROM `FARMACIA` WHERE ID_MEDICAMENTO IN (3, 6, 8);
----- AGREGAMOS UN ROLLBACK PARA REVERTIR EL CAMBIO REALIZADO-----
ROLLBACK;
COMMIT;

----- AÑADO LA CONSULTA DE LA TABLA FARMACIA PARA OBSERVAR LOS CAMBIOS-----
SELECT * FROM FARMACIA;
 
----- INSERCION DE DATOS EN UNA SEGUNDA TABLA-----

START TRANSACTION;
INSERT INTO MEDICO (ID_MEDICO, NOMBRE_MEDICO, APELLIDO_MEDICO, EMAIL_MEDICO) VALUES (16, 'FRANCISCO', 'VIERA', 'FRANCISCO.VIERA@GMAIL.COM');
INSERT INTO MEDICO (ID_MEDICO, NOMBRE_MEDICO, APELLIDO_MEDICO, EMAIL_MEDICO) VALUES (17, 'MARIA', 'RAMIREZ', 'MARIA.RAMIREZ@GMAIL.COM');
INSERT INTO MEDICO (ID_MEDICO, NOMBRE_MEDICO, APELLIDO_MEDICO, EMAIL_MEDICO) VALUES (18, 'JAIRO', 'MARCIALES', 'JAIRO.MARCIALES@GMAIL.COM');
INSERT INTO MEDICO (ID_MEDICO, NOMBRE_MEDICO, APELLIDO_MEDICO, EMAIL_MEDICO) VALUES (19, 'MARCELA', 'PEREZ', 'MARCELA.PEREZ@GMAIL.COM');
SAVEPOINT LOTE_1;
INSERT INTO MEDICO (ID_MEDICO, NOMBRE_MEDICO, APELLIDO_MEDICO, EMAIL_MEDICO) VALUES (20, 'MARIBEL', 'LARA', 'MARIBEL.LARA@GMAIL.COM');
INSERT INTO MEDICO (ID_MEDICO, NOMBRE_MEDICO, APELLIDO_MEDICO, EMAIL_MEDICO) VALUES (21, 'HECTOR', 'MOLINA', 'HECTOR.MOLINA@GMAIL.COM');
INSERT INTO MEDICO (ID_MEDICO, NOMBRE_MEDICO, APELLIDO_MEDICO, EMAIL_MEDICO) VALUES (22, 'JOEL', 'GUERRERO', 'JOEL.GUERRERO@GMAIL.COM');
INSERT INTO MEDICO (ID_MEDICO, NOMBRE_MEDICO, APELLIDO_MEDICO, EMAIL_MEDICO) VALUES (23, 'KARLA', 'REINA', 'KARLA.REINA@GMAIL.COM');
SAVEPOINT LOTE_2;

ROLLBACK TO LOTE_1;
ROLLBACK TO LOTE_2;
RELEASE SAVEPOINT LOTE_1; ----- ELIMINACION SAVEPOINT NUMERO 1----
RELEASE SAVEPOINT LOTE_2; ----- ELIMINACION SAVEPOINT NUMERO 2------
COMMIT;

SELECT * FROM MEDICO;

ALTER TABLE MEDICO ENGINE= InnoDB;----- CAMBIO DEL MOTOR DE ALMACENAMIENTO A INNODB
